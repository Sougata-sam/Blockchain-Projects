Courier Supply Chain Management System

Source code:

build.gradle—->

/*
* This file was generated by the Gradle 'init' task.
*
* This generated file contains a sample Java Library project to get you started.
* For more details look at the Java Libraries chapter in the Gradle
* User Manual available at https://docs.gradle.org/6.3/userguide/java_library_plugin.html
*/


plugins {
id("checkstyle")
// Apply the java-library plugin to add support for Java Library
id("java-library-distribution")
}

group = "CourierChain"
version = "1.0"


repositories {
// Use Maven Central for resolving dependencies.
mavenCentral()
maven {
url = uri("https://hyperledger.jfrog.io/hyperledger/fabric-maven")
}
maven {
url = uri("https://jitpack.io")
}
}

dependencies {
compileOnly("org.hyperledger.fabric-chaincode-java:fabric-chaincode-shim:2.2.+")
implementation("com.owlike:genson:1.5")
// This dependency is exported to consumers, found on their compile classpath.
api("org.apache.commons:commons-math3:3.6.1")
// This dependency is used internally, and not exposed to consumers on their own compile classpath.
implementation("com.google.guava:guava:28.2-jre")
// Use JUnit test framework
testImplementation("junit:junit:4.12")
—--------------------------------------------------------------
Parcel.java—->

package _CourierChain;

import com.owlike.genson.annotation.JsonProperty;
import org.hyperledger.fabric.contract.annotation.DataType;
import org.hyperledger.fabric.contract.annotation.Property;
import java.util.Objects;

@DataType()
public final class Parcel {

@Property()
private final String id;

@Property()
private final String sender;

@Property()
private final String receiver;

@Property()
private final String currentLocation;

@Property()
private final String status;

public String getId() {
return id;
}

public String getSender() {
return sender;
}

public String getReceiver() {
return receiver;
}

public String getCurrentLocation() {
return currentLocation;
}

public String getStatus() {
return status;
}

public Parcel(@JsonProperty("id") final String id, @JsonProperty("sender") final String sender,
@JsonProperty("receiver") final String receiver, @JsonProperty("currentLocation") final String currentLocation,
@JsonProperty("status") final String status) {
this.id = id;
this.sender = sender;
this.receiver = receiver;
this.currentLocation = currentLocation;
this.status = status;
}

@Override

public boolean equals(final Object obj) {
if (this == obj) {
return true;
}

if ((obj == null) || (getClass() != obj.getClass())) {
return false;
}

Parcel other = (Parcel) obj;
return Objects.deepEquals(new String[] { getId(), getSender(), getReceiver(), getCurrentLocation(), getStatus() },
new String[] { other.getId(), other.getSender(), other.getReceiver(), other.getCurrentLocation(), other.getStatus() });
}

@Override
public int hashCode() {
return Objects.hash(getId(), getSender(), getReceiver(), getCurrentLocation(), getStatus());
}

@Override
public String toString() {
return this.getClass().getSimpleName() + "@" + Integer.toHexString(hashCode()) + " [id=" + id + ", sender=" + sender
+ ", receiver=" + receiver + ", currentLocation=" + currentLocation + ", status=" + status + "]";
}
}
—------------------------------------------------------

ParcelSupply.java —->

package _CourierChain;

import org.hyperledger.fabric.contract.Context;
import org.hyperledger.fabric.contract.ContractInterface;
import org.hyperledger.fabric.contract.annotation.Contract;
import org.hyperledger.fabric.contract.annotation.Default;
import org.hyperledger.fabric.contract.annotation.Info;
import org.hyperledger.fabric.contract.annotation.Transaction;
import org.hyperledger.fabric.shim.ChaincodeException;
import org.hyperledger.fabric.shim.ChaincodeStub;
import com.owlike.genson.Genson;

@Contract(
name = "CourierChain",
info = @Info(
title = "CourierChain contract",
description = "A chaincode for managing courier chain tracking",
version = "0.0.1-SNAPSHOT"))

@Default
public final class ParcelSupply implements ContractInterface {
private final Genson genson = new Genson();
private enum CourierChainErrors {
PARCEL_NOT_FOUND,
PARCEL_ALREADY_EXISTS
}

@Transaction()
public void initLedger(final Context ctx) {
ChaincodeStub stub = ctx.getStub();
Parcel parcel = new Parcel("1", "Alice", "Bob", "Warehouse", "Registered");
String parcelState = genson.serialize(parcel);
stub.putStringState("1", parcelState);
}

@Transaction()
public Parcel addParcel(final Context ctx, final String id, final String sender, final String receiver,
final String currentLocation, final String status) {
ChaincodeStub stub = ctx.getStub();
String parcelState = stub.getStringState(id);

if (!parcelState.isEmpty()) {
String errorMessage = String.format("Parcel %s already exists", id);

System.out.println(errorMessage);
throw new ChaincodeException(errorMessage, CourierChainErrors.PARCEL_ALREADY_EXISTS.toString());
}

Parcel parcel = new Parcel(id, sender, receiver, currentLocation, status);
parcelState = genson.serialize(parcel);
stub.putStringState(id, parcelState);
return parcel;
}

@Transaction()
public Parcel queryParcelById(final Context ctx, final String id) {
ChaincodeStub stub = ctx.getStub();
String parcelState = stub.getStringState(id);
if (parcelState.isEmpty()) {
String errorMessage = String.format("Parcel %s does not exist", id);
System.out.println(errorMessage);
throw new ChaincodeException(errorMessage, CourierChainErrors.PARCEL_NOT_FOUND.toString());
}

Parcel parcel = genson.deserialize(parcelState, Parcel.class);
return parcel;
}

@Transaction()
public Parcel updateParcelStatus(final Context ctx, final String id, final String newStatus) {
ChaincodeStub stub = ctx.getStub();
String parcelState = stub.getStringState(id);
if (parcelState.isEmpty()) {
String errorMessage = String.format("Parcel %s does not exist", id);
System.out.println(errorMessage);
throw new ChaincodeException(errorMessage, CourierChainErrors.PARCEL_NOT_FOUND.toString());
}

Parcel parcel = genson.deserialize(parcelState, Parcel.class);
Parcel updatedParcel = new Parcel(parcel.getId(), parcel.getSender(), parcel.getReceiver(), parcel.getCurrentLocation(), newStatus);
String newParcelState = genson.serialize(updatedParcel);
stub.putStringState(id, newParcelState);
return updatedParcel;
}

@Transaction()
public Parcel transferParcelLocation(final Context ctx, final String id, final String newLocation) {
ChaincodeStub stub = ctx.getStub();
String parcelState = stub.getStringState(id);
if (parcelState.isEmpty()) {
String errorMessage = String.format("Parcel %s does not exist", id);
System.out.println(errorMessage);
throw new ChaincodeException(errorMessage, CourierChainErrors.PARCEL_NOT_FOUND.toString());
}

Parcel parcel = genson.deserialize(parcelState, Parcel.class);
Parcel updatedParcel = new Parcel(parcel.getId(), parcel.getSender(), parcel.getReceiver(), newLocation, parcel.getStatus());
String newParcelState = genson.serialize(updatedParcel);
stub.putStringState(id, newParcelState);

return updatedParcel;
}
}
