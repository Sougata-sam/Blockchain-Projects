Source Code:

Build.gradle

/*
* This file was generated by the Gradle 'init' task.
*
* This generated file contains a sample Java Library project to get you started.
* For more details look at the Java Libraries chapter in the Gradle
* User Manual available at https://docs.gradle.org/6.3/userguide/java_library_plugin.html
*/


plugins {
id("checkstyle")
// Apply the java-library plugin to add support for Java Library
id("java-library-distribution")
}

group = "DeLoan"
version = "1.0"


repositories {
// Use Maven Central for resolving dependencies.
mavenCentral()
maven {
url = uri("https://hyperledger.jfrog.io/hyperledger/fabric-maven")
}
maven {
url = uri("https://jitpack.io")
}
}

dependencies {
compileOnly("org.hyperledger.fabric-chaincode-java:fabric-chaincode-shim:2.2.+")
implementation("com.owlike:genson:1.5")
// This dependency is exported to consumers, found on their compile classpath.
api("org.apache.commons:commons-math3:3.6.1")
// This dependency is used internally, and not exposed to consumers on their own compile classpath.
implementation("com.google.guava:guava:28.2-jre")
// Use JUnit test framework
testImplementation("junit:junit:4.12")
}

—---------------------------------------------------

Loan.java

package _DeLoan;

import com.owlike.genson.annotation.JsonProperty;
import org.hyperledger.fabric.contract.annotation.DataType;
import org.hyperledger.fabric.contract.annotation.Property;
import java.util.Objects;

@DataType()
public final class Loan {

    @Property()
    private final String id;

    @Property()
    private final String lender;

    @Property()
    private final String borrowerName;

    @Property()
    private final int amount;

    @Property()
    private final double interestRate;

    @Property()
    private final String repaymentStatus;

    public Loan(@JsonProperty("id") final String id, 
                @JsonProperty("lender") final String lender, 
                @JsonProperty("borrowerName") final String borrowerName,  
                @JsonProperty("amount") final int amount, 
                @JsonProperty("interestRate") final double interestRate, 
                @JsonProperty("repaymentStatus") final String repaymentStatus) {
        this.id = id;
        this.lender = lender;
        this.borrowerName = borrowerName;
        this.amount = amount;
        this.interestRate = interestRate;
        this.repaymentStatus = repaymentStatus;
    }

    public String getId() {
        return id;
    }

    public String getLender() {
        return lender;
    }

    public String getBorrowerName() {
        return borrowerName;
    }

    public int getAmount() {
        return amount;
    }

    public double getInterestRate() {
        return interestRate;
    }

    public String getRepaymentStatus() {
        return repaymentStatus;
    }

    @Override
    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }

        if (obj == null || getClass() != obj.getClass()) {
            return false;
        }

        Loan other = (Loan) obj;
        return amount == other.amount &&
               Double.compare(other.interestRate, interestRate) == 0 &&
               Objects.equals(id, other.id) &&
               Objects.equals(lender, other.lender) &&
               Objects.equals(borrowerName, other.borrowerName) &&
               Objects.equals(repaymentStatus, other.repaymentStatus);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, lender, borrowerName, amount, interestRate, repaymentStatus);
    }

    @Override
    public String toString() {
        return String.format("Loan [id=%s, lender=%s, borrowerName=%s, amount=%d, interestRate=%.2f, repaymentStatus=%s]", 
                id, lender, borrowerName, amount, interestRate, repaymentStatus);
    }
}
—--------------------------------------------

LoanContract.java

package _DeLoan;

import org.hyperledger.fabric.contract.Context;
import org.hyperledger.fabric.contract.ContractInterface;
import org.hyperledger.fabric.contract.annotation.Contract;
import org.hyperledger.fabric.contract.annotation.Default;
import org.hyperledger.fabric.contract.annotation.Info;
import org.hyperledger.fabric.contract.annotation.Transaction;
import org.hyperledger.fabric.shim.ChaincodeException;
import org.hyperledger.fabric.shim.ChaincodeStub;
import com.owlike.genson.Genson;

@Contract(
    name = "DeLoan",
    info = @Info(
        title = "LoanContract",
        description = "A chaincode for loan management",
        version = "0.0.1-SNAPSHOT"
    )
)
@Default
public final class LoanContract implements ContractInterface {
    private final Genson genson = new Genson();

    private enum LoanContractErrors {
        LOAN_NOT_FOUND,
        LOAN_ALREADY_EXISTS
    }

    @Transaction()
    public void initLedger(final Context ctx) {
        ChaincodeStub stub = ctx.getStub();
        Loan loan = new Loan("1", "CITI", "Alice", 1000, 5.25, "As per schedule");
        String loanState = genson.serialize(loan);
        stub.putStringState("1", loanState);
    }

    @Transaction()
    public Loan addLoan(final Context ctx, final String id, final String lender, final String borrowerName, final int amount, final double interestRate, final String repaymentStatus) {
        ChaincodeStub stub = ctx.getStub();
        String loanState = stub.getStringState(id);

        if (!loanState.isEmpty()) {
            String errorMessage = String.format("Loan %s already exists", id);
            System.out.println(errorMessage);
            throw new ChaincodeException(errorMessage, LoanContractErrors.LOAN_ALREADY_EXISTS.toString());
        }

        Loan loan = new Loan(id, lender, borrowerName, amount, interestRate, repaymentStatus);
        loanState = genson.serialize(loan);
        stub.putStringState(id, loanState);
        return loan;
    }

    @Transaction()
    public Loan queryLoanById(final Context ctx, final String id) {
        ChaincodeStub stub = ctx.getStub();
        String loanState = stub.getStringState(id);
        if (loanState.isEmpty()) {
            String errorMessage = String.format("Loan %s does not exist", id);
            System.out.println(errorMessage);
            throw new ChaincodeException(errorMessage, LoanContractErrors.LOAN_NOT_FOUND.toString());
        }

        Loan loan = genson.deserialize(loanState, Loan.class);
        return loan;
    }

    @Transaction()
    public Loan updateInterestRate(final Context ctx, final String id, final String newInterestRate) {
        ChaincodeStub stub = ctx.getStub();
        String loanState = stub.getStringState(id);
        if (loanState.isEmpty()) {
            String errorMessage = String.format("Loan %s does not exist", id);
            System.out.println(errorMessage);
            throw new ChaincodeException(errorMessage, LoanContractErrors.LOAN_NOT_FOUND.toString());
        }

        Loan loan = genson.deserialize(loanState, Loan.class);
        double updatedInterestRate = Double.parseDouble(newInterestRate);

        Loan updatedLoan = new Loan(loan.getId(), loan.getLender(), loan.getBorrowerName(), loan.getAmount(), updatedInterestRate, loan.getRepaymentStatus());
        String newLoanState = genson.serialize(updatedLoan);
        stub.putStringState(id, newLoanState);
        return updatedLoan;
    }

    @Transaction()
    public Loan updatedRepaymentStatus(final Context ctx, final String id, final String newRepaymentStatus) {
        ChaincodeStub stub = ctx.getStub();
        String loanState = stub.getStringState(id);
        if (loanState.isEmpty()) {
            String errorMessage = String.format("Loan %s does not exist", id);
            System.out.println(errorMessage);
            throw new ChaincodeException(errorMessage, LoanContractErrors.LOAN_NOT_FOUND.toString());
        }

        Loan loan = genson.deserialize(loanState, Loan.class);
        Loan updatedLoan = new Loan(loan.getId(), loan.getLender(), loan.getBorrowerName(), loan.getAmount(), loan.getInterestRate(), newRepaymentStatus);
        
        String newLoanState = genson.serialize(updatedLoan);
        stub.putStringState(id, newLoanState);
        return updatedLoan;
    }
}

—-------------------------------------------------------
